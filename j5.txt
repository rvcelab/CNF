public class Book {
private Long id;
public Long getId() {
return id;
}
public void setId(Long id) {
this.id = id;
}
public String getTitle() {
return title;
}
public void setTitle(String title) {
this.title = title;
}
public String getAuthor() {
return author;
}
public void setAuthor(String author) {
this.author = author;
}
public int getPublicationYear() {
return publicationYear;
}
public void setPublicationYear(int publicationYear) {
this.publicationYear = publicationYear;
}
private String title;
private String author;
private int publicationYear;
}


@RestController
@RequestMapping(&quot;/api/books&quot;)
public class BookController {
private final List&lt;Book&gt; books = new ArrayList&lt;Book&gt;();
@GetMapping
public List&lt;Book&gt; getAllBooks() {
return books;
}

@GetMapping(&quot;/{id}&quot;)
public Book getBookById(@PathVariable Long id) {
return findBookById(id);
}

@PostMapping
public Book addBook(@RequestBody Book book) {
book.setId(generateBookId());
books.add(book);
return book;
}

@PutMapping(&quot;/{id}&quot;)
public Book updateBook(@PathVariable Long id, @RequestBody Book updatedBook) {
Book existingBook = findBookById(id);
if (existingBook != null) {
existingBook.setTitle(updatedBook.getTitle());
existingBook.setAuthor(updatedBook.getAuthor());
existingBook.setPublicationYear(updatedBook.getPublicationYear());
}
return existingBook;
}

@DeleteMapping(&quot;/{id}&quot;)
public void deleteBook(@PathVariable Long id) {
Book bookToRemove = findBookById(id);
if (bookToRemove != null) {
books.remove(bookToRemove);
}
}


private Book findBookById(Long id) {
for(Person p:al) {

if(p.getName().equalsIgnoreCase(name)) {
return p;
}else {
return null;
}
}
}
}